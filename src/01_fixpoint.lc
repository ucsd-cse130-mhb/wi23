
--------------------------------------------------------------------------------
-- Booleans
--------------------------------------------------------------------------------

let TRUE  = \x y -> x
let FALSE = \x y -> y
let ITE   = \b x y -> b x y
let AND   = \b1 b2 -> ITE b1 b2 FALSE
let OR    = \b1 b2 -> ITE b1 TRUE b2

--------------------------------------------------------------------------------
-- Pairs
--------------------------------------------------------------------------------

let PAIR  = \x y b -> ITE b x y
let FST   = \p     -> p TRUE
let SND   = \p     -> p FALSE

--------------------------------------------------------------------------------
-- Numbers
--------------------------------------------------------------------------------

let ZERO  = \f x -> x
let ONE   = \f x -> f x
let TWO   = \f x -> f (f x)
let THREE = \f x -> f (f (f x))
let FOUR  = \f x -> f (f (f (f x)))
let FIVE  = \f x -> f (f (f (f (f x))))
let SIX   = \f x -> f (f (f (f (f (f x)))))

let INC   = \n f x -> f (n f x)
let DEC   = \n -> FST (n (\p -> PAIR (SND p) (INC (SND p))) (PAIR ZERO ZERO))

let ADD   = \n m -> n INC m
let SUB   = \n m -> m DEC n
let MUL   = \n m -> n (ADD m) ZERO
let ISZ   = \n -> n (\z -> FALSE) TRUE

--------------------------------------------------------------------------------
-- Fixpoint Combinator
--------------------------------------------------------------------------------

let FIX = \stp -> (\x -> stp (x x)) (\x -> stp (x x))

--------------------------------------------------------------------------------
-- Ignore this definition; it's a hack to allow you to test some parts before
-- completing others
--------------------------------------------------------------------------------

let TODO  = \i g n o r e -> i g n o r e

--------------------------------------------------------------------------------
-- do not modify text BEFORE this line
--------------------------------------------------------------------------------

-- (a) Recursive Factorial --
let FactSTEP = \fact -> \n -> TODO       
let FACT     = FIX FactSTEP   

-- (b) Recursive Modulus --
let ModSTEP = \mod -> \m -> \n -> TODO
let MOD     = FIX ModSTEP

--------------------------------------------------------------------------------
-- do not modify text AFTER this line
--------------------------------------------------------------------------------

-- part (a)

eval fact_zero :
  FACT ZERO
  =~> ONE

eval fact_one :
  FACT ONE
  =~> ONE

eval fact_two :
  FACT TWO
  =~> TWO

eval fact_three :
  FACT THREE
  =~> SIX

-- part (b)

eval mod_one_two :
  MOD ONE TWO
  =~> ONE

eval mod_two_two :
  MOD TWO TWO
  =~> ZERO

eval mod_three_two :
  MOD THREE TWO
  =~> ONE

eval mod_four_two :
  MOD FOUR TWO
  =~> ZERO

